#! /usr/bin/python3
import argparse
import os
import re

class Exp:

    def __init__(self):
        self.template_location = "Experimentalist/core/template/"
        self._setupParams()
        self._do()

    def _header(self):
        print("Experimentalist CLI")

    def _footer(self):
        print("Done. Bye!")

    def _getTemplate(self, name):
        template = os.path.join(self.template_location, f"{name}.tmpl")
        data = ""
        with open(template, 'r') as file:
            data = file.read()
        return data

    def _getNames(self, name):
        baseName = name.lower()
        baseName = re.sub(r"(_|-)+", " ", name).title().replace(" ", "").replace("*","")
        fileName = baseName.lower()
        fileNameExt = f"{fileName}.py"
        return name, baseName, fileName, fileNameExt

    def _saveNewFile(self, fileName, content):
        with open(fileName, 'w') as file:
            file.write(content)
 
    def createClass(self, name: str, classType: str):
        types = {"action", "worker"}
        classType = classType.lower()
        if classType in types:
            print(f"Creating {classType}: {name}")
            mainName, className, fileName, fileNameExt = self._getNames(name)
            fpath = os.path.join("Experimentalist", classType, fileNameExt)
            template_c = self._getTemplate(classType)
            template_m = self._getTemplate("module")

            template_c = template_c.replace("@@@CNAME@@@", className).replace("@@@NAME@@@", mainName)
            template_m = template_m.replace("@@@CNAME@@@", className).replace("@@@PLACE@@@", "action").replace("@@@MODULE@@@", fileName)

            self._saveNewFile(fpath, template_c)
            self._appendToFile(template_m, classType.title())
        else:
            print("Wrong type")

    def _appendToFile(self, line, fileType):
        fileName = f"Experimentalist/{fileType}s.py"
        with open(fileName, "a") as myfile:
            myfile.write(line + "\n")

    def _setupParams(self):
        parser = argparse.ArgumentParser(
            prog='exp',
            description="Experimentalist CLI. Create class templates with ease.",
            epilog=''
        )

        parser.add_argument("-a", "--action", action="store", dest='actionName', default="")
        parser.add_argument("-w", "--worker", action="store", dest='workerName', default="")
        parser.add_argument("-t", "--test",   action="store_true", dest='addTesting', default=False)
        self.arguments = parser.parse_args()

    def _do(self):
        self._header()
        if self.arguments.actionName != "":
            self.createClass(self.arguments.actionName, "action")
        if self.arguments.workerName != "":
            self.createClass(self.arguments.workerName, "worker")
        if self.arguments.addTesting is True:
            print("Add testing module")
        self._footer()

Exp()
